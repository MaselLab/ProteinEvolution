'''
Author : Sara Willis
Date   : Wednesday February 27, 2019


The purpose of this submodule is to take in a file of raw Tango output and return to the user a list of the concatenated raw scores. In the process, it reintroduces unknown amino acids located in the body of the original sequence back into the raw score list as X's

Input : 
       1) TangoFilename   -- The raw output file generated by Tango 
       2) ProteinSequence -- The protein sequence analyzed by Tango. This sequence will have had all X's removed prior to analyses
       3) RemoveFile      -- By default, the program won't remove the original Tango file after executing. If the user wants
                             the Tango file to be deleted after analysis, use True when calling the function

Output: 
       All Tango scores with X's inserted in where the unknown residues were removed from the input protein in list format
     
'''

import csv, os


def ReplaceXTangoOutput(TangoFilename,ProteinSequence,RemoveFile=False):    
    Header = True

    # Defines an empty list where the raw Tango values will be stored
    AggregationList = []
    
    # We use an index to keep track of where we are in the body of the protein sequence.
    proteinIndex = 0

    with open(TangoFilename, 'r') as f:
        reader = csv.reader(f, delimiter = '\t')
        for row in reader:
            if Header == True:
                Header = False
            else:
                ResidueNumber = row[0]
                # We're only interested in the Aggregation score for this analysis
                Aggregation = float(row[5])
                
                # We check the aggregation score against the AA at our location in the body of the protein sequence. 
                if ProteinSequence[proteinIndex] != 'X':
                    
                    # If it's not unknown, then we add the aggregation score to our output list
                    AggregationList.append(Aggregation)
                    proteinIndex += 1
                    
                # If the amino acid is unknown, then we need to make sure to add in an X to the list of output aggregation scores before we append the aggregation score. First, we check to make sure that there's only one X that precedes the aggregation score (there cannot be more than two since we excluded sequences with three or more sequential unknown sequences prior to our analyses).
                elif ProteinSequence[proteinIndex:proteinIndex+2] != 'XX':
                    
                    # If only one X precedes our score, we add an X to our list of aggregation scores
                    AggregationList += ['X',Aggregation]
                    
                    # and add 2 to the protein index so we're at the appropriate location when we look at the next row
                    proteinIndex += 2
                else:
                    
                    # If two XX's precede our aggregation score, we add both to the aggregation score list and then the current aggregation score
                    AggregationList += ['X','X',Aggregation]
                    
                    # We then add 3 to our proteinIndex so we're at the appropriate place during our next iteration
                    proteinIndex += 3
                    
        # Once we're done parsing the file, we make sure that we've included all the X's in our Aggregation (since if the protein sequence ends with X's, these will not be accounted for in our for loop)
        # If the length of the aggregation list matches the length of the protein sequence, then nothing needs to be done
        if len(ProteinSequence) == len(AggregationList):
            pass
        
        # If the aggregation list is one less than the protein sequence, then it ended with an X. As a result, an X is added to the aggregation list
        elif len(ProteinSequence) - len(AggregationList) == 1:
            AggregationList.append('X')
            
        # If two X's exist at the end of the protein sequence, they are added to the aggregation list
        elif len(ProteinSequence) - len(AggregationList) == 2:
            AggregationList += ['X','X']
            
    if RemoveFile == True:
        # Once the file has been parsed, it is removed if the user has specified this option
        os.remove(TangoFilename)
    
    # And the list of raw aggregation scores with X's appended is returned to the user
    return AggregationList
